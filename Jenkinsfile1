pipeline {

    agent {
        label "docker"
    }

    options {
      buildDiscarder logRotator(artifactNumToKeepStr: '3',numToKeepStr: '3')
      disableConcurrentBuilds(abortPrevious: true)
    }

    tools {
      nodejs 'node-24-0-0'
    }

    environment {
      MONGO_URI = "mongodb://mongodb:27017/mydb"
    }

    stages {
        stage("Installing Dependencies"){

            options {
                timestamps()
                timeout(time: 1, unit: 'HOURS')
            }

            steps {
                echo "Installing Dependencies..."

                sh 'npm install --no-audit'
            }
        }
        stage('Dependency Scanning') {
            parallel {
                stage("Dependency Scanning using npm") {
                    steps {
                        echo "scanning dependencies using npm audit..."

                        sh 'npm audit --audit-level=critical'
                    }
                }
                stage('Dependency Scanning Using Owasp') {
                    steps {
                        echo "Scanning dependencies using owasp"

                        sh 'npm install -g yarn'

                        dependencyCheck additionalArguments: '''
                            --scan \'./\'
                            --out \'./\'
                            --format \'ALL\'
                            --prettyPrint
                            --nvdApiKey b3e7726d-3647-4fc6-a293-e2db6482208f
                            --disableYarnAudit''',
                            odcInstallation: 'dependency-check-12-1-3'

                        dependencyCheckPublisher failedTotalCritical: 1, pattern: 'dependency-check-report.xml', stopBuild: true
                    }
//                     post {
//                         always {
//                             stash  name: 'owasp-reports', includes: 'dependency-check-report.*,dependency-check-junit.xml', allowEmpty: true
//                         }
//                     }
                }
            }
        }
        stage("Unit Test") {

//             options {
//                 retry(2)
//             }

            steps {

                echo "Running Unit Tests..."

                withCredentials([usernamePassword(credentialsId: 'mongodb-creds', passwordVariable: 'MONGO_PASSWORD', usernameVariable: 'MONGO_USERNAME')]) {
//                    ` echo "Seeding database..."
//                     sh 'npm run db:seed'`

                    echo "Running Unit Tests..."
                    sh 'npm test'
                }
            }
//             post {
//                 always {
//                     stash allowEmpty: true, includes: 'test-results.xml', name: 'unit-test-reports'
//                 }
//             }
        }
        stage("Coverage Testing") {
            steps {

                withCredentials([usernamePassword(credentialsId: 'mongodb-creds', passwordVariable: 'MONGO_PASSWORD', usernameVariable: 'MONGO_USERNAME')]) {
                    echo "Running coverage Tests..."

                    catchError(buildResult: 'SUCCESS', message: 'coverage is less than 80%', stageResult: 'UNSTABLE') {
                        sh 'npm run coverage'
                    }
                }
            }
//             post {
//                 always {
//                     stash allowEmpty: true, includes: 'coverage/lcov-report/*.html', name: 'coverage-reports'
//                 }
//             }
        }
        stage("SAST - Sonarqube") {
            steps {
                withSonarQubeEnv('sonarqube-server') {
                    sh '''
                        npm run sonar -- \
                            -Dsonar.projectKey=solar-system \
                            -Dsonar.sources=./app.js \
                            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
                    '''
                }
                script {
                    timeout(time: 1, unit: 'HOURS') {
                      def qualityGatePayload = waitForQualityGate()
                      if (qualityGatePayload.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qualityGatePayload.status}"
                      }
                    }
                }
            }
        }
        stage('Build Docker Image') {
//             agent {
//                 label 'docker'
//             }
            steps {
                echo "Building Docker Image..."

                sh 'printenv'
                sh 'docker build . -t solar-system:$GIT_COMMIT'
            }
        }
        stage('Trivy Vulnerability Scanning') {
//             agent {
//                 label 'docker'
//             }
            steps {
                echo "Vulnerability Scanning using Trivy..."

                sh '''
                    set -ex
                    trivy image \
                        --severity LOW,MEDIUM,HIGH \
                        --exit-code 0 \
                        --quiet \
                        --format json -o trivy-image-MEDIUM-results.json \
                    solar-system:$GIT_COMMIT

                    trivy image \
                        --severity CRITICAL \
                        --exit-code 1 \
                        --quiet \
                        --format json -o trivy-image-CRITICAL-results.json \
                    solar-system:$GIT_COMMIT
                '''
            }
            post {
                always {
                    sh '''
                        set -ex
                        trivy convert \
                            --format template \
                            --template "@/usr/local/share/trivy/templates/html.tpl" \
                            -o trivy-image-MEDIUM-results.html \
                        trivy-image-MEDIUM-results.json

                        trivy convert \
                            --format template \
                            --template "@/usr/local/share/trivy/templates/html.tpl" \
                            -o trivy-image-CRITICAL-results.html \
                        trivy-image-CRITICAL-results.json

                        trivy convert \
                            --format template \
                            --template "@/usr/local/share/trivy/templates/junit.tpl" \
                            -o trivy-image-MEDIUM-results.xml \
                        trivy-image-MEDIUM-results.json

                        trivy convert \
                            --format template \
                            --template "@/usr/local/share/trivy/templates/junit.tpl" \
                            -o trivy-image-CRITICAL-results.xml \
                        trivy-image-CRITICAL-results.json
                    '''
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-login-creds') {
                        def tags = ["${GIT_COMMIT}", "latest", "${currentBuild.number}"]

                        tags.each { tag ->
                            sh """
                                set -ex
                                docker tag solar-system:$GIT_COMMIT neeraj05902/solar-syatem:${tag}

                                docker push neeraj05902/solar-syatem:${tag}
                            """
                        }
                    }
                }
            }
        }
        stage("Deploy Application In EC2") {
            steps {

            }
        }
    }
    post {

//     Note: post block runs on node where last stage executes. As last stage execution happens on docker-agent node, therefor post block will also execute on docker-agent

      always {

//         unstash 'owasp-reports'
//         unstash 'unit-test-reports'
//         unstash 'coverage-reports'

        junit allowEmptyResults: true, stdioRetention: 'FAILED', testResults: 'dependency-check-junit.xml'

        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            icon: '',
            keepAll: true,
            reportDir: '.',
            reportFiles: 'dependency-check-report.html',
            reportName: 'Dependency Check HTML Report',
            reportTitles: 'Dependency Check HTML Report',
            useWrapperFileDirectly: false
        ])

        junit allowEmptyResults: true, keepProperties: true, keepTestNames: true, stdioRetention: 'ALL', testResults: 'test-results.xml'

        publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                icon: '',
                keepAll: true,
                reportDir: 'coverage/lcov-report/',
                reportFiles: 'index.html',
                reportName: 'Coverage HTML Report',
                reportTitles: 'Coverage HTML Report',
                useWrapperFileDirectly: false
        ])

        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            icon: '',
            keepAll: true,
            reportDir: '.',
            reportFiles: 'trivy-image-MEDIUM-results.html',
            reportName: 'TRIVY LOW-MEDIUM SEVERITY VULNERABILITIES HTML Report',
            reportTitles: 'TRIVY LOW-MEDIUM SEVERITY VULNERABILITIES HTML Report',
            useWrapperFileDirectly: false
        ])

        publishHTML([
            allowMissing: true,
            alwaysLinkToLastBuild: true,
            icon: '',
            keepAll: true,
            reportDir: '.',
            reportFiles: 'trivy-image-CRITICAL-results.html',
            reportName: 'TRIVY HIGH-CRITICAL SEVERITY VULNERABILITIES HTML Report',
            reportTitles: 'TRIVY HIGH-CRITICAL SEVERITY VULNERABILITIES HTML Report',
            useWrapperFileDirectly: false
        ])

        junit allowEmptyResults: true, keepProperties: true, keepTestNames: true, stdioRetention: 'ALL', testResults: 'trivy-image-MEDIUM-results.xml'

        junit allowEmptyResults: true, keepProperties: true, keepTestNames: true, stdioRetention: 'ALL', testResults: 'trivy-image-CRITICAL-results.xml'
      }
    }
}